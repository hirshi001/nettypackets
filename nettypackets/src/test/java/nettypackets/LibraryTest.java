/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nettypackets;

import logger.ConsoleColors;
import logger.DateStringFunction;
import logger.Logger;
import nettypackets.networkdata.DefaultNetworkData;
import nettypackets.networkdata.NetworkData;
import nettypackets.packet.PacketHolder;
import nettypackets.packetdecoderencoder.PacketEncoderDecoder;
import nettypackets.packetdecoderencoder.SimplePacketEncoderDecoder;
import nettypackets.packetregistry.DefaultPacketRegistry;
import nettypackets.packetregistry.PacketRegistry;
import nettypackets.packetregistry.SidedPacketRegistryContainer;
import org.junit.Test;

public class LibraryTest {

    public static NetworkData serverNetworkData;
    public static SidedPacketRegistryContainer serverPacketRegistries;
    public static PacketRegistry serverRegistry;

    public static NetworkData clientNetworkData;
    public static SidedPacketRegistryContainer clientPacketRegistries;
    public static PacketRegistry clientRegistry;

    public static Server server;
    public static Client client;

    public static PacketEncoderDecoder encoderDecoder;


    @Test
    public void test() throws InterruptedException {

        System.setOut(new Logger(System.out, System.err, new DateStringFunction(ConsoleColors.RED, "[","]")).debugShort(true).debug());

        serverPacketRegistries = new SidedPacketRegistryContainer();
        serverRegistry = serverPacketRegistries.addRegistry(new DefaultPacketRegistry("iogames"));
        serverRegistry.register(new PacketHolder<>(TestPacket::new, TestPacket::serverHandle, TestPacket.class), 0);
        serverRegistry.register(new PacketHolder<>(TestPacket2::new, TestPacket2::serverHandle, TestPacket2.class), 1);

        clientPacketRegistries = new SidedPacketRegistryContainer();
        clientRegistry = clientPacketRegistries.addRegistry(new DefaultPacketRegistry("iogames"));
        clientRegistry.register(new PacketHolder<>(TestPacket::new, TestPacket::clientHandle, TestPacket.class), 0);
        clientRegistry.register(new PacketHolder<>(TestPacket2::new, TestPacket2::clientHandle, TestPacket2.class), 1);

        encoderDecoder = new SimplePacketEncoderDecoder();
        serverNetworkData = new DefaultNetworkData(encoderDecoder, serverPacketRegistries);
        clientNetworkData = new DefaultNetworkData(encoderDecoder, clientPacketRegistries);

        server = new Server(8080, serverNetworkData);
        Thread thread = new Thread(){
            @Override
            public void run() {
                try {
                    server.startUp();
                }catch(Exception ignored){}
            }
        };

        thread.start();

        Thread.sleep(1000);

        client = new Client("localhost", 8080, clientNetworkData);
        thread = new Thread(){
            @Override
            public void run() {
                try {
                    client.run();
                }catch(Exception e){}
            }
        };
        thread.start();

        Thread.sleep(1000);

        int numOfPackets = 50;
        for(int i=0;i<numOfPackets;i++){

            //Thread.sleep(100);
            client.sendPacket(new TestPacket("1 hi " + i).setPacketRegistry(clientRegistry));

               // client.sendPacket(new TestPacket2("2 hi " + i).setPacketRegistry(clientRegistry));
        }
        client.channel.flush();
        Thread.sleep(1000);
        server.channels.flush();
        Thread.sleep(1000);

        assert server.packetsReceived == client.packetsSent && client.packetsSent == numOfPackets;
        assert server.packetsSent == client.packetsReceived;


    }

}
