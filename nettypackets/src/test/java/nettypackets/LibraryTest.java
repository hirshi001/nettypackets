/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nettypackets;

import io.netty.bootstrap.Bootstrap;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelOption;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import logger.ConsoleColors;
import logger.DateStringFunction;
import logger.Logger;
import nettypackets.network.clientfactory.ClientFactory;
import nettypackets.network.serverfactory.ServerFactory;
import nettypackets.packet.PacketHolder;
import nettypackets.packetdecoderencoder.PacketEncoderDecoder;
import nettypackets.packetdecoderencoder.SimplePacketEncoderDecoder;
import nettypackets.packetregistry.DefaultPacketRegistry;
import nettypackets.packetregistry.PacketRegistry;
import org.junit.Test;

public class LibraryTest {


    public static final String NAME = "iogames";
    public static PacketRegistry serverRegistry;

    public static PacketRegistry clientRegistry;

    public static nettypackets.network.server.Server server;
    public static nettypackets.network.client.Client client;

    public static PacketEncoderDecoder encoderDecoder;


    @Test
    public void test() throws InterruptedException {

        encoderDecoder = new SimplePacketEncoderDecoder();
        System.setOut(new Logger(System.out, System.err, new DateStringFunction(ConsoleColors.RED, "[","]")).debugShort(true).debug());



        ServerFactory serverFactory = ServerFactory.multiPacketRegistryServerFactory().
                setPort(8080).
                setPacketEncoderDecoder(encoderDecoder).
                setBootstrap(new ServerBootstrap().
                        group(new NioEventLoopGroup(), new NioEventLoopGroup()).
                        channel(NioServerSocketChannel.class).
                        option(ChannelOption.SO_BACKLOG, 128).
                        childOption(ChannelOption.SO_KEEPALIVE, true)).
                addPacketRegistry(serverRegistry = new DefaultPacketRegistry(NAME).
                        register(new PacketHolder<>(TestPacket::new, TestPacket::serverHandle, TestPacket.class), 0).
                        register(new PacketHolder<>(TestPacket2::new, TestPacket2::serverHandle, TestPacket2.class), 1)
                );



        ClientFactory clientFactory = ClientFactory.multiPacketRegistryClientFactory().
                setIpAddress("localhost").
                setPort(8080).
                setPacketEncoderDecoder(encoderDecoder).
                setBootstrap(new Bootstrap().
                        group(new NioEventLoopGroup()).
                        channel(NioSocketChannel.class).
                        option(ChannelOption.SO_KEEPALIVE, true)
                ).
                addPacketRegistry(clientRegistry = new DefaultPacketRegistry(NAME).
                        register(new PacketHolder<>(TestPacket::new, TestPacket::clientHandle, TestPacket.class), 0).
                        register(new PacketHolder<>(TestPacket2::new, TestPacket2::clientHandle, TestPacket2.class), 1)
                );

        server = serverFactory.connectServerNowUninterruptibly();

        client = clientFactory.connectAsync().await().getNow();

        client.sendPacket(new TestPacket("test").setPacketRegistry(clientRegistry));

        Thread.sleep(1000);

    }

}
